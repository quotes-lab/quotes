/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quotes;

import com.google.gson.Gson;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.reflect.TypeToken;

import java.io.*;
import java.lang.reflect.Type;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.Buffer;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class App {

    public static void main(String[] args) throws IOException {
        //open file and push json to array
        List<Quote> quotes;
        try {
            quotes = getQuotesFromUrl();
        } catch ( Exception e){
            System.out.println(e.getMessage());
            System.out.println("API Call fail");
            quotes = getQuotes();
        }
        //print quote
        System.out.println(getSpecificQuote(args, quotes));
    }

    private static List<Quote> getQuotesFromUrl() throws IOException {

        String urlString = "http://ron-swanson-quotes.herokuapp.com/v2/quotes";
        URL url = new URL(urlString);

        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");
        // Time till exception thrown
        connection.setConnectTimeout(5000);
        // Response Code
        connection.getResponseCode();

        InputStreamReader reader = new InputStreamReader(connection.getInputStream());
        BufferedReader buff = new BufferedReader(reader);
        String result = buff.readLine();
        Gson gson = new Gson();
        RonSwanson[] quote = gson.fromJson(result, RonSwanson[].class);
        Quote apiQuote = new Quote(quote[0].quote, null, null);
        appendToJson(apiQuote);
        System.out.println("Got from URL");
        System.out.println(buff);
        System.out.println(buff.readLine());
        List<Quote> quotes = new ArrayList<>();
        quotes.add(apiQuote);
        return quotes;

    }

    private static void appendToJson(Quote json) throws IOException {
        List<Quote> quotes = getQuotes();
        quotes.add(json);
        Gson gson = new Gson();
        System.out.println("Made here");
        gson.toJson(quotes, new FileWriter("src/test/resources/small.json", false));
        return;
    }

    public static List<Quote> getQuotes() throws FileNotFoundException {
        Gson gson = new Gson();
        FileReader reader;
        try {
            reader = new FileReader("src/test/resources/recentquotes.json");
        } catch (FileNotFoundException e) {
            try {
                reader = new FileReader("app/src/test/resources/recentquotes.json");
            } catch (FileNotFoundException ex) {
                throw new FileNotFoundException();
            }
        }

        //https://howtodoinjava.com/gson/gson-parse-json-array/
        Type userListType = new TypeToken<ArrayList<Quote>>() {
        }.getType();
        return gson.fromJson(reader, userListType);
    }

    public static String getSpecificQuote(String[] args, List<Quote> quotes) {
        //if applicable filter quotes list
        if (args.length > 1 && args[0].equals("author")) {
            quotes = quotes.stream().filter(quote -> quote.author.equals(args[1])).collect(Collectors.toList());
            if (quotes.size() == 0) return "No quotes found :'(";
        }
        if (args.length > 1 && args[0].equals("contains")) {
            quotes = quotes.stream().filter(quote -> quote.text.contains(args[1])).collect(Collectors.toList());
            if (quotes.size() == 0) return "No quotes found :'(";
        }
        //get a single random quote
        Quote quote = quotes.get(((int) (Math.random() * (quotes.size() - 1))));
        return String.format("%s said: %s", quote.author, quote.text);
    }
}
